ALGORITHMS


DEFINITION

In mathematics and computer science, an algorithm is a finite sequence of rigorous instructions,
 typically used to solve a class of specific problems or to perform a computation.
Algorithms are used as specifications for performing calculations and data processing.

Algorithms can be expressed as natural languages, programming languages, pseudocode, flowcharts and control tables. 
Natural language expressions are rare, as they are more ambiguous. 



TAKING AN EXAMPLE

It can be understood by taking the example of cooking a new recipe.
 To cook a new recipe, one reads the instructions and steps and executes them one by one, in the given sequence.
 The result thus obtained is the new dish cooked perfectly. Every time you use your phone, computer, laptop, or calculator you are using Algorithms. 
Similarly, algorithms help to do a task in programming to get the expected output.

The Algorithm designed are language-independent, 
i.e. they are just plain instructions that can be implemented in any language,
 and yet the output will be the same, as expected.




TYPES OF ALGORITHMS:

There are several types of algorithms available. 
Some important algorithms are:

1. Brute Force Algorithm: It is the simplest approach for a problem. A brute force algorithm is the first approach that comes to finding when we see a problem.

2. Recursive Algorithm: A recursive algorithm is based on recursion. In this case, a problem is broken into several sub-parts and called the same function again and again.

3. Backtracking Algorithm: The backtracking algorithm basically builds the solution by searching among all possible solutions. Using this algorithm, we keep on building the solution following criteria.
 Whenever a solution fails we trace back to the failure point and build on the next solution and continue this process till we find the solution or all possible solutions are looked after.

4. Searching Algorithm: Searching algorithms are the ones that are used for searching elements or groups of elements from a particular data structure.
 They can be of different types based on their approach or the data structure in which the element should be found.

5. Sorting Algorithm: Sorting is arranging a group of data in a particular manner according to the requirement. The algorithms which help in performing this function are called sorting algorithms. 
Generally sorting algorithms are used to sort groups of data in an increasing or decreasing manner.

6. Hashing Algorithm: Hashing algorithms work similarly to the searching algorithm. But they contain an index with a key ID. In hashing, a key is assigned to specific data.

7. Divide and Conquer Algorithm: This algorithm breaks a problem into sub-problems, solves a single sub-problem and merges the solutions together to get the final solution.
 It consists of the following three steps:

Divide
Solve
Combine

8. Greedy Algorithm: In this type of algorithm the solution is built part by part. The solution of the next part is built based on the immediate benefit of the next part.
 The one solution giving the most benefit will be chosen as the solution for the next part.

9. Dynamic Programming Algorithm: This algorithm uses the concept of using the already found solution to avoid repetitive calculation of the same part of the problem.
 It divides the problem into smaller overlapping subproblems and solves them.

10. Randomized Algorithm: In the randomized algorithm we use a random number so it gives immediate benefit. The random number helps in deciding the expected outcome.





HOW TO DESIGN AN ALGORITHM?
In order to write an algorithm, the following things are needed as a pre-requisite:  

The problem that is to be solved by this algorithm i.e. clear problem definition.
The constraints of the problem must be considered while solving the problem.
The input to be taken to solve the problem.
The output to be expected when the problem is solved.
The solution to this problem, is within the given constraints.




ALGORITHM TIME AND SPACE COMPLEXITY
An algorithm is defined as complex based on the amount of Space and Time it consumes. 
Hence the Complexity of an algorithm refers to the measure of the Time that it will need to execute and get the expected output, and the Space it will need to store all the data (input, temporary data and output). 
Hence these two factors define the efficiency of an algorithm. 
The two factors of Algorithm Complexity are:

Time Factor: Time is measured by counting the number of key operations such as comparisons in the sorting algorithm.
Space Factor: Space is measured by counting the maximum memory space required by the algorithm.



